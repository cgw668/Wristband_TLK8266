/*
 * ble_ll_encrypt.h
 *
 *  Created on: 2016-9-22
 *      Author: Telink
 */

#ifndef BLE_LL_ENCRYPT_H_
#define BLE_LL_ENCRYPT_H_





typedef struct {
	u32		pkt;
	u8		dir;
	u8		iv[8];
} ble_cyrpt_nonce_t;


typedef struct {
	u32					enc_pno;
	u32					dec_pno;
	u8					sk[16];			//session key
	ble_cyrpt_nonce_t	nonce;
	u8					st;
	u8					enable;			//1: slave enable; 2: master enable
	u8					mic_fail;
} ble_crypt_para_t;







/*
 * @brief API to encrypt plaintextData to encrypteTextData
 *
 * */
int blt_encrypted_data(u8*key, u8*plaintextData, u8* encrypteTextData);

/*
 * @brief API to specifies specifiesLtk to connHandle
 *
 * */
int blt_specLtk2ConnHandle(u16 connHandle, u8* specifiesLtk);

/*
 * @brief  API to notify none LTK associated with the connHandle
 *
 * */
int blt_specLtk2ConnHandleFail(u16 connHandle);
/*
 * @brief  API to return p256 public key to host from controller.
 *
 * */
int blt_generateNewP256Key(u8 *newP256Key);

/*
 * @brief  API to return p256 public key to host from controller.
 *
 * */
int blt_generateDHKey(u8* remoteP256Key, u8* newDHKey);

/*
 * @brief  API to add one device to the list of address translations used to resolve Resolvable Private Addresses in the Controller.
 *
 * */
int blt_addDevAddr(u8* peerIdAddrType, u8* peerIdAddr, u8* peerIRK, u8* localIRK);
/*
 * @brief  API to remove one device from the list of address translations used to resolve Resolvable Private Addresses in the controller.
 *
 * */
int blt_removeDevAddr(u8* peerIdAddrType, u8* peerIdAddr );

/*
 * @brief  API to  remove all devices from the list of address translations used to resolve Resolvable Private Addresses in the Controller.
 *
 * */
int blt_clearResolvingList ();

/*
 * @brief  API to  read the total number of address translation entries in the resolving list that can be stored in the Controller.
 *
 * */
int blt_getResolvingListSize ();

/*
 * @brief  API to get the current peer Resolvable Private Address being used for the corresponding peer Public and Random (static) Identity Address.
 * 		   The peer¡¯s resolvable address being used may change after the command is called.
 *
 * */
int blt_getPeerResolvableAddr(u8* peerIdAddrType, u8* peerIdAddr, u8* peerResolvableAddr);

/*
 * @brief  API to get the current local Resolvable Private Address being used for the corresponding peer Identity Address.
 * 		   The local¡¯s resolvable address being used may change after the command is called.
 *
 * */
int blt_getLocalResolvableAddr(u8* peerIdAddrType, u8* peerIdAddr, u8* LocalResolvableAddr);

/*
 * @brief 	API to  enable resolution of Resolvable Private Addresses in the Controller.
 * 			This causes the Controller to use the resolving list whenever the Controller
 * 			receives a local or peer Resolvable Private Address.
 *
 * */
int blt_setAddrResolutionEn (u8 resolutionEn);

/*
 * @brief 	API to set the length of time the controller uses a Resolvable Private Address
 * 			before a new resolvable	private address is generated and starts being used.
 * 			This timeout applies to all addresses generated by the controller
 *
 * */
int blt_setResolvablePrivateAddrTimer (u16 timeout_s);

/*
 * @brief 	API to request the Controller to generate 8 bytes of random data to be sent to the Host.
 *
 * */
int blt_getRandomNumber (u8* randomNumber);

#endif /* BLE_LL_ENCRYPT_H_ */
